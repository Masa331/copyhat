var _NoRedInk$elm_rails$Rails_Decode$errors = function (mappings) {
	var tuplesFromField = F3(
		function (errors, results, field) {
			return A2(
				_elm_lang$core$List$append,
				results,
				A2(
					_elm_lang$core$List$map,
					function (error) {
						return {ctor: '_Tuple2', _0: field, _1: error};
					},
					errors));
		});
	var fieldDecoderFor = function (fieldName) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], 'Unrecognized Field: ', fieldName)),
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Json_Decode$succeed,
				A2(_elm_lang$core$Dict$get, fieldName, mappings)));
	};
	var toFinalDecoder = F2(
		function (results, rawErrors) {
			toFinalDecoder:
			while (true) {
				var _p0 = rawErrors;
				if (_p0.ctor === '[]') {
					return _elm_lang$core$Result$Ok(results);
				} else {
					var _p2 = _p0._0._0;
					var newResults = A2(
						_elm_lang$core$Result$map,
						A2(tuplesFromField, _p0._0._1, results),
						A2(
							_elm_lang$core$Json_Decode$decodeString,
							fieldDecoderFor(_p2),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'\"',
								A2(_elm_lang$core$Basics_ops['++'], _p2, '\"'))));
					var _p1 = newResults;
					if (_p1.ctor === 'Err') {
						return newResults;
					} else {
						var _v2 = _p1._0,
							_v3 = _p0._1;
						results = _v2;
						rawErrors = _v3;
						continue toFinalDecoder;
					}
				}
			}
		});
	var errorsDecoder = _elm_lang$core$Json_Decode$keyValuePairs(
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
	var finalDecoder = A2(
		_elm_lang$core$Json_Decode$customDecoder,
		errorsDecoder,
		toFinalDecoder(
			_elm_lang$core$Native_List.fromArray(
				[])));
	return A2(_elm_lang$core$Json_Decode_ops[':='], 'errors', finalDecoder);
};
