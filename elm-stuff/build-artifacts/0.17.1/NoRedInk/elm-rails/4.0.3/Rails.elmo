var _NoRedInk$elm_rails$Rails_ops = _NoRedInk$elm_rails$Rails_ops || {};
_NoRedInk$elm_rails$Rails_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _NoRedInk$elm_rails$Rails$csrfToken = _NoRedInk$elm_rails$Native_Rails.csrfToken;
var _NoRedInk$elm_rails$Rails$send = F3(
	function (verb, url, body) {
		var csrfTokenString = A2(_elm_lang$core$Maybe$withDefault, '', _NoRedInk$elm_rails$Rails$csrfToken);
		var csrfTokenHeaders = (_elm_lang$core$String$isEmpty(csrfTokenString) || _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$toUpper(verb),
			'GET')) ? _elm_lang$core$Native_List.fromArray(
			[]) : _elm_lang$core$Native_List.fromArray(
			[
				A2(_NoRedInk$elm_rails$Rails_ops['=>'], 'X-CSRF-Token', csrfTokenString)
			]);
		var requestSettings = {
			verb: verb,
			headers: A2(
				_elm_lang$core$Basics_ops['++'],
				csrfTokenHeaders,
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_NoRedInk$elm_rails$Rails_ops['=>'], 'Content-Type', 'application/json'),
						A2(_NoRedInk$elm_rails$Rails_ops['=>'], 'Accept', 'application/json, text/javascript, */*; q=0.01'),
						A2(_NoRedInk$elm_rails$Rails_ops['=>'], 'X-Requested-With', 'XMLHttpRequest')
					])),
			url: url,
			body: body
		};
		return A2(_evancz$elm_http$Http$send, _evancz$elm_http$Http$defaultSettings, requestSettings);
	});
var _NoRedInk$elm_rails$Rails$ResponseDecoder = F2(
	function (a, b) {
		return {success: a, failure: b};
	});
var _NoRedInk$elm_rails$Rails$always = function (decoder) {
	return A2(_NoRedInk$elm_rails$Rails$ResponseDecoder, decoder, decoder);
};
var _NoRedInk$elm_rails$Rails$decoder = F2(
	function (successDecoder, failureDecoder) {
		return A2(_NoRedInk$elm_rails$Rails$ResponseDecoder, successDecoder, failureDecoder);
	});
var _NoRedInk$elm_rails$Rails$RailsError = function (a) {
	return {ctor: 'RailsError', _0: a};
};
var _NoRedInk$elm_rails$Rails$HttpError = function (a) {
	return {ctor: 'HttpError', _0: a};
};
var _NoRedInk$elm_rails$Rails$handleResponse = F3(
	function (onSuccess, onError, response) {
		var unexpectedPayloadError = _NoRedInk$elm_rails$Rails$HttpError(
			_evancz$elm_http$Http$UnexpectedPayload('Response body is a blob, expecting a string.'));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(200, response.status) < 1) && (_elm_lang$core$Native_Utils.cmp(response.status, 300) < 0);
		if (_p0 === true) {
			var _p1 = response.value;
			if (_p1.ctor === 'Text') {
				return A2(onSuccess, response, _p1._0);
			} else {
				return _elm_lang$core$Task$fail(unexpectedPayloadError);
			}
		} else {
			var _p2 = response.value;
			if (_p2.ctor === 'Text') {
				return A2(onError, response, _p2._0);
			} else {
				return _elm_lang$core$Task$fail(unexpectedPayloadError);
			}
		}
	});
var _NoRedInk$elm_rails$Rails$fromJson = F2(
	function (decoder, response) {
		var promoteError = function (rawError) {
			var _p3 = rawError;
			if (_p3.ctor === 'RawTimeout') {
				return _NoRedInk$elm_rails$Rails$HttpError(_evancz$elm_http$Http$Timeout);
			} else {
				return _NoRedInk$elm_rails$Rails$HttpError(_evancz$elm_http$Http$NetworkError);
			}
		};
		var onError = F2(
			function (response, str) {
				var _p4 = A2(_elm_lang$core$Json_Decode$decodeString, decoder.failure, str);
				if (_p4.ctor === 'Ok') {
					return _elm_lang$core$Task$fail(
						_NoRedInk$elm_rails$Rails$RailsError(_p4._0));
				} else {
					return _elm_lang$core$Task$fail(
						_NoRedInk$elm_rails$Rails$HttpError(
							A2(_evancz$elm_http$Http$BadResponse, response.status, response.statusText)));
				}
			});
		var onSuccess = F2(
			function (response, str) {
				var _p5 = A2(_elm_lang$core$Json_Decode$decodeString, decoder.success, str);
				if (_p5.ctor === 'Ok') {
					return _elm_lang$core$Task$succeed(_p5._0);
				} else {
					return _elm_lang$core$Task$fail(
						_NoRedInk$elm_rails$Rails$HttpError(
							_evancz$elm_http$Http$UnexpectedPayload(str)));
				}
			});
		return A2(
			_elm_lang$core$Task$andThen,
			A2(_elm_lang$core$Task$mapError, promoteError, response),
			A2(_NoRedInk$elm_rails$Rails$handleResponse, onSuccess, onError));
	});
var _NoRedInk$elm_rails$Rails$get = F2(
	function (decoder, url) {
		return A2(
			_NoRedInk$elm_rails$Rails$fromJson,
			decoder,
			A3(_NoRedInk$elm_rails$Rails$send, 'GET', url, _evancz$elm_http$Http$empty));
	});
var _NoRedInk$elm_rails$Rails$post = F3(
	function (decoder, url, body) {
		return A2(
			_NoRedInk$elm_rails$Rails$fromJson,
			decoder,
			A3(_NoRedInk$elm_rails$Rails$send, 'POST', url, body));
	});
