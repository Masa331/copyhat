var _user$project$FormCreator$elements_being_dragged = function (model) {
	return A2(
		_elm_lang$core$List$any,
		function (_) {
			return _.being_dragged;
		},
		model.form.inputs);
};
var _user$project$FormCreator$subscriptions = function (model) {
	var getPositons = _user$project$Ports$getPosition(_user$project$Messages$PositionReturned);
	var mouse_up = _user$project$FormCreator$elements_being_dragged(model) ? _elm_lang$mouse$Mouse$ups(_user$project$Messages$DragStop) : _elm_lang$core$Platform_Sub$none;
	var clicks = _elm_lang$mouse$Mouse$clicks(_user$project$Messages$MouseClick);
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[clicks, mouse_up]));
};
var _user$project$FormCreator$encodeFormInJson = function (form) {
	var inputs = _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			function (input) {
				return _elm_lang$core$Json_Encode$object(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'title',
							_1: _elm_lang$core$Json_Encode$string(input.title)
						},
							{
							ctor: '_Tuple2',
							_0: 'type',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$String$toLower(
									_elm_lang$core$Basics$toString(input.type$)))
						}
						]));
			},
			form.inputs));
	var id = _elm_lang$core$Json_Encode$int(form.id);
	var name = _elm_lang$core$Json_Encode$string(form.name);
	return _evancz$elm_http$Http$string(
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'name', _1: name},
						{ctor: '_Tuple2', _0: 'id', _1: id},
						{ctor: '_Tuple2', _0: 'inputs', _1: inputs}
					]))));
};
var _user$project$FormCreator$failureDecoder = A2(_elm_lang$core$Json_Decode_ops[':='], 'failure', _elm_lang$core$Json_Decode$string);
var _user$project$FormCreator$successDecoder = A2(_elm_lang$core$Json_Decode_ops[':='], 'redirect', _elm_lang$core$Json_Decode$string);
var _user$project$FormCreator$formSubmit = function (model) {
	return {
		ctor: '_Tuple2',
		_0: model,
		_1: A3(
			_elm_lang$core$Task$perform,
			_user$project$Messages$FormFailed,
			_user$project$Messages$FormSaved,
			A3(
				_NoRedInk$elm_rails$Rails$post,
				{success: _user$project$FormCreator$successDecoder, failure: _user$project$FormCreator$failureDecoder},
				'/forms',
				_user$project$FormCreator$encodeFormInJson(model.form)))
	};
};
var _user$project$FormCreator$formSaved = F2(
	function (model, url) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _user$project$Ports$redirect(url)
		};
	});
var _user$project$FormCreator$stopDragStatus = function (model) {
	var oldForm = model.form;
	var newInputs = A2(
		_elm_lang$core$List$map,
		function (input) {
			return _elm_lang$core$Native_Utils.update(
				input,
				{being_dragged: false});
		},
		oldForm.inputs);
	var newModel = _elm_lang$core$Native_Utils.update(
		model,
		{
			form: _elm_lang$core$Native_Utils.update(
				oldForm,
				{inputs: newInputs})
		});
	return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$FormCreator$updateDragStatus = F2(
	function (id, model) {
		var oldForm = model.form;
		var newInputs = A2(
			_elm_lang$core$List$map,
			function (input) {
				return _elm_lang$core$Native_Utils.eq(input.id, id) ? _elm_lang$core$Native_Utils.update(
					input,
					{being_dragged: true}) : input;
			},
			oldForm.inputs);
		var newModel = _elm_lang$core$Native_Utils.update(
			model,
			{
				form: _elm_lang$core$Native_Utils.update(
					oldForm,
					{inputs: newInputs})
			});
		return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$FormCreator$updatePosition = F2(
	function (position, model) {
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$FormCreator$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'FormSubmit':
				return _user$project$FormCreator$formSubmit(model);
			case 'FormSaved':
				return A2(_user$project$FormCreator$formSaved, model, _p0._0);
			case 'FormFailed':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'MouseClick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mouse_position: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DragStart':
				return A2(_user$project$FormCreator$updateDragStatus, _p0._0, model);
			case 'DragStop':
				return _user$project$FormCreator$stopDragStatus(model);
			default:
				return A2(_user$project$FormCreator$updatePosition, _p0._0, model);
		}
	});
var _user$project$FormCreator$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Models$init, view: _user$project$Views$view, update: _user$project$FormCreator$update, subscriptions: _user$project$FormCreator$subscriptions})
};
