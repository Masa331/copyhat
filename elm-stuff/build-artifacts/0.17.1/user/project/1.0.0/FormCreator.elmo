var _user$project$FormCreator$encodeFormInJson = function (form) {
	var inputs = _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			function (input) {
				return _elm_lang$core$Json_Encode$object(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'title',
							_1: _elm_lang$core$Json_Encode$string(input.title)
						},
							{
							ctor: '_Tuple2',
							_0: 'type',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$String$toLower(
									_elm_lang$core$Basics$toString(input.type$)))
						}
						]));
			},
			form.inputs));
	var id = _elm_lang$core$Json_Encode$int(form.id);
	var name = _elm_lang$core$Json_Encode$string(form.name);
	return _evancz$elm_http$Http$string(
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'name', _1: name},
						{ctor: '_Tuple2', _0: 'id', _1: id},
						{ctor: '_Tuple2', _0: 'inputs', _1: inputs}
					]))));
};
var _user$project$FormCreator$failureDecoder = A2(_elm_lang$core$Json_Decode_ops[':='], 'failure', _elm_lang$core$Json_Decode$string);
var _user$project$FormCreator$successDecoder = A2(_elm_lang$core$Json_Decode_ops[':='], 'redirect', _elm_lang$core$Json_Decode$string);
var _user$project$FormCreator$formSubmit = function (form) {
	return {
		ctor: '_Tuple2',
		_0: form,
		_1: A3(
			_elm_lang$core$Task$perform,
			_user$project$Messages$FormFailed,
			_user$project$Messages$FormSaved,
			A3(
				_NoRedInk$elm_rails$Rails$post,
				{success: _user$project$FormCreator$successDecoder, failure: _user$project$FormCreator$failureDecoder},
				'/forms',
				_user$project$FormCreator$encodeFormInJson(form)))
	};
};
var _user$project$FormCreator$inputUpdate = F3(
	function (id, value, input) {
		return A4(
			_user$project$Models$Input,
			input.title,
			input.type$,
			_elm_lang$core$Native_Utils.eq(input.id, id) ? value : input.value,
			input.id);
	});
var _user$project$FormCreator$init = {
	ctor: '_Tuple2',
	_0: {
		name: 'Prvni hovno Formular',
		id: 1,
		errors: '',
		response: '',
		inputs: _elm_lang$core$Native_List.fromArray(
			[
				A4(_user$project$Models$Input, 'Email', _user$project$Models$Email, '', 1),
				A4(_user$project$Models$Input, 'Name;', _user$project$Models$Text, '', 2),
				A4(_user$project$Models$Input, 'submit', _user$project$Models$Submit, '', 3)
			])
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$FormCreator$redirect = _elm_lang$core$Native_Platform.outgoingPort(
	'redirect',
	function (v) {
		return v;
	});
var _user$project$FormCreator$formSaved = F2(
	function (form, url) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				form,
				{errors: '', response: url}),
			_1: _user$project$FormCreator$redirect(url)
		};
	});
var _user$project$FormCreator$update = F2(
	function (msg, form) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'FormSubmit':
				return _user$project$FormCreator$formSubmit(form);
			case 'InputUpdate':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						form,
						{
							inputs: A2(
								_elm_lang$core$List$map,
								A2(_user$project$FormCreator$inputUpdate, _p0._0, _p0._1),
								form.inputs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FormSaved':
				return A2(_user$project$FormCreator$formSaved, form, _p0._0);
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						form,
						{
							errors: _elm_lang$core$Basics$toString(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$FormCreator$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: _user$project$FormCreator$init,
			view: _user$project$Views$view,
			update: _user$project$FormCreator$update,
			subscriptions: function (_p1) {
				return _elm_lang$core$Platform_Sub$none;
			}
		})
};
